{
  "openapi": "3.0.1",
  "info": {
    "title": "Cooperativism API",
    "description": "Para obter mais informações sobre o desenvolvimento acessar o [github](https://github.com/gabriellopesjds/cooperativism).",
    "contact": {
      "email": "gabriel.lopesjds@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api"
    }
  ],
  "paths": {
    "/v1/stave": {
      "post": {
        "summary": "Stave registration.",
        "description": "Register an stave.",
        "tags": [
          "Stave"
        ],
        "operationId": "registerStave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaveRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Voting session open.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaveResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "List of stave.",
        "description": "Finds all staves",
        "tags": [
          "Stave"
        ],
        "operationId": "finderAllStave",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          },
          {
            "$ref": "#/components/parameters/staveSortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of staves",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaveFinderResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          }
        }
      }
    },
    "/v1/stave/{id}": {
      "put": {
        "summary": "Stave update.",
        "description": "Receives the stave update request.",
        "tags": [
          "Stave"
        ],
        "operationId": "updateStave",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaveUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Stave update request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaveResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Stave delete.",
        "description": "Receives the stave delete request.",
        "tags": [
          "Stave"
        ],
        "operationId": "deleteStave",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Stave delete request was successful."
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "Stave find.",
        "description": "Find stave by id",
        "tags": [
          "Stave"
        ],
        "operationId": "findStave",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Stave find request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaveResponseWrapper"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    },
    "/v1/stave/{id}/voting-session": {
      "post": {
        "summary": "Create voting session.",
        "description": "Receives the opening of the voting session.",
        "tags": [
          "Stave"
        ],
        "operationId": "registerVotingSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VotingSessionRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "201": {
            "description": "Stave update request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VotingSessionResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    },
    "/v1/stave/{id}/voting-session/result": {
      "get": {
        "summary": "Contabilize result of stave.",
        "description": "Accounts the stave result",
        "tags": [
          "Stave"
        ],
        "operationId": "contabilizeResultStave",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts the stave request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VotingSessionResultResponseWrapper"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    },
    "/v1/stave/{id}/voting-session/vote": {
      "post": {
        "summary": "Vote on an stave.",
        "description": "Receive the vote on an stave.",
        "tags": [
          "Stave"
        ],
        "operationId": "registerVote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoteRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "201": {
            "description": "Vote register request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoteResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    },
    "/v1/assembly": {
      "post": {
        "summary": "Assembly registration.",
        "description": "Register an assembly.",
        "tags": [
          "Assembly"
        ],
        "operationId": "registerAssembly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssemblyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssemblyResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "List of assembly.",
        "description": "Finds all assembly.",
        "tags": [
          "Assembly"
        ],
        "operationId": "finderAllAssembly",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          }
        ],
        "responses": {
          "200": {
            "description": "List of assemblys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssemblyFinderResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          }
        }
      }
    },
    "/v1/assembly/{id}": {
      "put": {
        "summary": "Assembly update.",
        "description": "Receives the assembly update request.",
        "tags": [
          "Assembly"
        ],
        "operationId": "updateAssembly",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssemblyUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Assembly update request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssemblyResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Assembly delete.",
        "description": "Receives the assembly delete request.",
        "tags": [
          "Assembly"
        ],
        "operationId": "deleteAssembly",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Assembly delete request was successful."
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "Assembly find.",
        "description": "Find assembly by id",
        "tags": [
          "Assembly"
        ],
        "operationId": "findAssembly",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Assembly find request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssemblyResponseWrapper"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    },
    "/v1/associated": {
      "post": {
        "summary": "Associated registration.",
        "description": "Register an Associated.",
        "tags": [
          "Associated"
        ],
        "operationId": "registerAssociated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociatedRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "List of Associated.",
        "description": "Finds all Associated.",
        "tags": [
          "Associated"
        ],
        "operationId": "finderAllAssociated",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/sortDirection"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Associateds.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedFinderResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          }
        }
      }
    },
    "/v1/associated/{id}": {
      "put": {
        "summary": "Associated update.",
        "description": "Receives the Associated update request.",
        "tags": [
          "Associated"
        ],
        "operationId": "updateAssociated",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociatedUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Associated update request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedResponseWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Associated delete.",
        "description": "Receives the Associated delete request.",
        "tags": [
          "Associated"
        ],
        "operationId": "deleteAssociated",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Associated delete request was successful."
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "get": {
        "summary": "Associated find.",
        "description": "Find Associated by id",
        "tags": [
          "Associated"
        ],
        "operationId": "findAssociated",
        "parameters": [
          {
            "$ref": "#/components/parameters/idInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Associated find request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedResponseWrapper"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    },
    "/v1/associated/cpf/{cpf}": {
      "get": {
        "summary": "Associated find.",
        "description": "Find Associated by CPF",
        "tags": [
          "Associated"
        ],
        "operationId": "findAssociatedByCpf",
        "parameters": [
          {
            "$ref": "#/components/parameters/cpfInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Associated find request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociatedResponseWrapper"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Associated delete.",
        "description": "Receives the Associated delete by CPF request.",
        "tags": [
          "Associated"
        ],
        "operationId": "deleteAssociatedByCpf",
        "parameters": [
          {
            "$ref": "#/components/parameters/cpfInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "Associated delete request was successful."
          },
          "400": {
            "$ref": "#/components/schemas/BadRequest"
          },
          "500": {
            "$ref": "#/components/schemas/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PageResult": {
        "type": "object",
        "properties": {
          "pageable": {
            "$ref": "#/components/schemas/pageable"
          },
          "totalPages": {
            "type": "integer",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "example": 1
          },
          "pageNumber": {
            "type": "integer",
            "example": 1
          },
          "numberOfElements": {
            "type": "integer",
            "example": 1
          },
          "totalElements": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "last": {
            "type": "boolean",
            "example": true
          },
          "first": {
            "type": "boolean",
            "example": true
          },
          "hasNext": {
            "type": "boolean",
            "example": true
          },
          "hasPrevious": {
            "type": "boolean",
            "example": true
          },
          "empty": {
            "type": "boolean",
            "example": true
          },
          "sort": {
            "$ref": "#/components/schemas/sort"
          }
        }
      },
      "pageable": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "example": "o"
          },
          "pageSize": {
            "type": "integer",
            "example": 5
          },
          "offset": {
            "type": "integer",
            "example": 0,
            "format": "int64"
          },
          "unpaged": {
            "type": "boolean",
            "example": false
          },
          "paged": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "sort": {
        "type": "object",
        "properties": {
          "sorted": {
            "type": "boolean",
            "example": true
          },
          "unsorted": {
            "type": "boolean",
            "example": false
          },
          "empty": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "An error when processing a request.",
        "properties": {
          "code": {
            "description": "The error code.",
            "type": "string",
            "example": "NotNull"
          },
          "message": {
            "description": "The error message.",
            "type": "string",
            "example": "receiver.receiverTaxId: cannot be null"
          },
          "field": {
            "description": "The field or attribute the error is related with.",
            "type": "string",
            "example": "receiver.receiverTaxId"
          },
          "action": {
            "description": "Action that may be performed to solve the issue, if any.",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "Errors": {
        "type": "object",
        "description": "A collection of errors when processing a request.",
        "properties": {
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request.",
        "$ref": "#/components/schemas/Errors"
      },
      "InternalServerError": {
        "description": "Internal server error.",
        "$ref": "#/components/schemas/Errors"
      },
      "AssociatedBaseResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Associated identifier",
            "example": "1309dadb-44dd-4792-a06e-1ab9f14a1b27"
          },
          "name": {
            "description": "Associate name",
            "type": "string",
            "example": "Gabriel Lopes"
          },
          "cpf": {
            "description": "The cpf of the associated.",
            "type": "string",
            "example": "65732190074"
          }
        },
        "required": [
          "id",
          "name",
          "cpf"
        ]
      },
      "AssociatedBaseUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Associate name",
            "type": "string",
            "example": "Gabriel Lopes"
          }
        },
        "required": [
          "name"
        ]
      },
      "AssociatedBaseRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Associate name",
            "type": "string",
            "example": "Gabriel Lopes"
          },
          "cpf": {
            "description": "The cpf of the associated.",
            "type": "string",
            "example": "65732190074"
          }
        },
        "required": [
          "name",
          "cpf"
        ]
      },
      "AssociatedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssociatedBaseResponse"
          }
        ]
      },
      "AssociatedPageableResponse": {
        "description": "A response of an Associated register request.",
        "type": "object",
        "properties": {
          "associateds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedResponse"
            }
          },
          "pageResult": {
            "$ref": "#/components/schemas/PageResult"
          }
        }
      },
      "AssociatedResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssociatedResponse"
          }
        }
      },
      "AssociatedFinderResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssociatedPageableResponse"
          }
        }
      },
      "AssociatedRequest": {
        "description": "An Associated register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssociatedBaseRequest"
          }
        ]
      },
      "AssociatedUpdateRequest": {
        "description": "An Associated register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssociatedBaseUpdateRequest"
          }
        ]
      },
      "AssemblyBaseResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Associated identifier",
            "example": "1309dadb-44dd-4792-a06e-1ab9f14a1b27"
          },
          "description": {
            "type": "string",
            "description": "Assembly description",
            "example": "Assembleia 2021"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Meeting date and time",
            "example": "2021-03-21T03:00:00"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Assembly creation date",
            "example": "2021-03-21T03:00:00"
          }
        },
        "required": [
          "id",
          "description",
          "date",
          "creationDate"
        ]
      },
      "AssemblyBaseRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Assembly description",
            "example": "Assembleia 2021",
            "maxLength": 255,
            "minLength": 1
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Meeting date and time",
            "example": "2021-03-21T03:00:00"
          }
        },
        "required": [
          "description",
          "date"
        ]
      },
      "AssemblyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssemblyBaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "staves": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StaveBaseResponse"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AssemblyPageableResponse": {
        "description": "A response of an Assembly register request.",
        "type": "object",
        "properties": {
          "assemblys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssemblyResponse"
            }
          },
          "pageResult": {
            "$ref": "#/components/schemas/PageResult"
          }
        }
      },
      "AssemblyResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssemblyResponse"
          }
        }
      },
      "AssemblyFinderResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssemblyPageableResponse"
          }
        }
      },
      "AssemblyRequest": {
        "description": "An assembly register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssemblyBaseRequest"
          },
          {
            "type": "object",
            "properties": {
              "staves": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StaveBaseRequest"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "AssemblyUpdateRequest": {
        "description": "An Assembly update request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssemblyBaseRequest"
          }
        ]
      },
      "StaveBaseResponse": {
        "type": "object",
        "description": "Stave basic data",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Stave identifier",
            "example": "1309dadb-44dd-4792-a06e-1ab9f14a1b27"
          },
          "theme": {
            "description": "Theme of stave",
            "type": "string",
            "example": "Theme that will be discussed in the agenda"
          },
          "description": {
            "type": "string",
            "description": "Description of stave",
            "example": "Description stave ..."
          }
        },
        "required": [
          "id",
          "theme"
        ]
      },
      "StaveBaseRequest": {
        "type": "object",
        "description": "Stave basic data",
        "properties": {
          "theme": {
            "description": "Theme of stave",
            "type": "string",
            "example": "Theme that will be discussed in the stave",
            "maxLength": 100,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Desciption of stave",
            "example": "Description theme ...",
            "maxLength": 255
          }
        },
        "required": [
          "theme"
        ]
      },
      "StaveResponse": {
        "description": "A response of an Stave register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaveBaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "assembly": {
                "$ref": "#/components/schemas/AssemblyBaseResponse"
              }
            }
          }
        ]
      },
      "StavePageableResponse": {
        "description": "A response of an Stave register request.",
        "type": "object",
        "properties": {
          "staves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaveResponse"
            }
          },
          "pageResult": {
            "$ref": "#/components/schemas/PageResult"
          }
        }
      },
      "StaveResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/StaveResponse"
          }
        }
      },
      "StaveFinderResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/StavePageableResponse"
          }
        }
      },
      "StaveRequest": {
        "description": "An Stave register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaveBaseRequest"
          },
          {
            "type": "object",
            "properties": {
              "idAssembly": {
                "type": "string",
                "format": "uuid",
                "description": "Assembly identifier",
                "example": "73a45ab4-cda9-4ae2-aaaa-1344632c88fe"
              }
            },
            "required": [
              "idAssembly"
            ]
          }
        ]
      },
      "StaveUpdateRequest": {
        "description": "An Stave update request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaveBaseRequest"
          }
        ]
      },
      "VotingSessionState": {
        "description": "Voting session status:\n * OPEN - Voting session open.\n * COMPLETED - Voting session completed.\n",
        "type": "string",
        "enum": [
          "OPEN",
          "COMPLETED"
        ],
        "example": "OPEN"
      },
      "VotingSessionBaseResponse": {
        "type": "object",
        "description": "Voting session basic data",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Voting session identifier",
            "example": "1309dadb-44dd-4792-a06e-1ab9f14a1b27"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Opening date and time",
            "example": "2021-03-21T03:00:00"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Closing date and time",
            "example": "2021-03-21T03:10:00"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int64",
            "description": "Duration in minutes that a voting session will be open",
            "example": 10,
            "default": 1
          },
          "state": {
            "$ref": "#/components/schemas/VotingSessionState"
          }
        },
        "required": [
          "id",
          "startDate",
          "endDate",
          "durationInMinutes",
          "state"
        ]
      },
      "VotingSessionResponse": {
        "description": "A response of an voting session register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VotingSessionBaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "stave": {
                "$ref": "#/components/schemas/StaveResponse"
              }
            }
          }
        ]
      },
      "VotingSessionResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VotingSessionResponse"
          }
        }
      },
      "VotingSessionRequest": {
        "description": "An voting session create request.",
        "type": "object",
        "properties": {
          "durationInMinutes": {
            "type": "integer",
            "format": "int64",
            "description": "Duration in minutes that a voting session will be open",
            "example": 10,
            "default": 1
          }
        }
      },
      "VoteBaseResponse": {
        "type": "object",
        "description": "Vote basic data",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Vote identifier",
            "example": "1309dadb-44dd-4792-a06e-1ab9f14a1b27"
          },
          "vote": {
            "$ref": "#/components/schemas/VoteType"
          }
        },
        "required": [
          "id",
          "vote"
        ]
      },
      "VoteResponse": {
        "description": "A response of an Vote register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VoteBaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "associated": {
                "$ref": "#/components/schemas/AssociatedResponse"
              }
            }
          }
        ]
      },
      "VoteResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VoteResponse"
          }
        }
      },
      "VoteType": {
        "description": "Associated vote on the stave:\n * YES - (Sim).\n * NO - (Não).\n",
        "type": "string",
        "enum": [
          "YES",
          "NO"
        ],
        "example": "YES"
      },
      "VoteRequest": {
        "description": "An vote create request.",
        "type": "object",
        "properties": {
          "voteType": {
            "$ref": "#/components/schemas/VoteType"
          },
          "idAssociated": {
            "type": "string",
            "format": "uuid",
            "description": "Associated identifier",
            "example": "73a45ab4-cda9-4ae2-aaaa-1344632c88fe"
          }
        },
        "required": [
          "voteType",
          "idAssociated"
        ]
      },
      "VotingSessionResultBaseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VotingSessionBaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "totalVotes": {
                "description": "Total amount of votes",
                "type": "integer",
                "format": "int64",
                "example": 66
              },
              "totalPositiveVotes": {
                "description": "Total amount of votes positives",
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "totalNegativeVotes": {
                "description": "Total amount of votes negatives",
                "type": "integer",
                "format": "int64",
                "example": 16
              }
            }
          }
        ]
      },
      "VotingSessionResultResponse": {
        "description": "A response of an Vote register request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaveResponse"
          },
          {
            "type": "object",
            "properties": {
              "votingSession": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VotingSessionResultBaseResponse"
                }
              }
            }
          }
        ]
      },
      "VotingSessionResultResponseWrapper": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VotingSessionResultResponse"
          }
        }
      }
    },
    "parameters": {
      "cpfInPath": {
        "description": "The required cpf value.",
        "name": "cpf",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "22982097079"
        }
      },
      "idInPath": {
        "description": "The required identifier (ID) value.",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "66828294-9eeb-4391-aea6-e59cd4415862"
        }
      },
      "staveSortBy": {
        "description": "Sort field of data for query of stave",
        "name": "sortBy",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "THEME",
            "DESCRIPTION"
          ],
          "example": "THEME",
          "default": "THEME"
        }
      },
      "sortDirection": {
        "description": "Sort direction of data for query",
        "name": "sortDirection",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ],
          "example": "ASC",
          "default": "ASC"
        }
      },
      "pageSize": {
        "description": "Size of the pages",
        "name": "pageSize",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 20
        }
      },
      "pageNumber": {
        "description": "Number of the current page ",
        "name": "pageNumber",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      }
    }
  }
}